[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "server"
dynamic = ["version"]
description = 'Collects data from APIs and renders it as an image for the Device to request & display.'
readme = "README.md"
requires-python = ">=3.9" # default on Raspberry Pi
license = "MIT"
keywords = []
authors = [
  { name = "Mike Holmes", email = "michael@mcholmes.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]

dependencies = [
  "tzdata", # fallback in case OS doesn't have IANA timezone data
  "pydantic",
  "pillow",
  "gcsa",
  "requests",
  "toml",
  "fastapi",
  "uvicorn[standard]",
  "typer"
]

[project.urls]
Documentation = "https://github.com/unknown/server#readme"
Issues = "https://github.com/unknown/server/issues"
Source = "https://github.com/unknown/server"

[project.scripts]
server = "server.cli:cli"

[tool.hatch.version]
path = "src/server/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "mypy>=1.0.0",
  "pyupgrade"
]
[tool.hatch.envs.default.scripts]
upgrade = "pyupgrade --py39-plus src/server/*.py"
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]
types = "mypy --install-types --non-interactive {args:src/server tests}"

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.build]
exclude = [
  "/tests"
]
[tool.coverage.run]
source_pkgs = ["server", "tests"]
branch = true
parallel = true
omit = [
  "src/server/__about__.py",
]

[tool.coverage.paths]
server = ["src/server", "*/server/src/server"]
tests = ["tests", "*/server/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
